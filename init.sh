#!/bin/bash

# VS CodeÁâàÊú¨‰ø°ÊÅØÊèí‰ª∂Ëá™Âä®ÁîüÊàêËÑöÊú¨
# ‰ΩøÁî®ÊñπÊ≥ï: bash create-vscode-plugin.sh [È°πÁõÆÂêçÁß∞]

set -e  # ÈÅáÂà∞ÈîôËØØÊó∂ÈÄÄÂá∫

# ÈªòËÆ§È°πÁõÆÂêçÁß∞
PROJECT_NAME=${1:-"version-info-extension123"}

echo "üöÄ ÂºÄÂßãÂàõÂª∫ VS Code Êèí‰ª∂È°πÁõÆ: $PROJECT_NAME"

# ÂàõÂª∫È°πÁõÆÊ†πÁõÆÂΩï
mkdir -p "$PROJECT_NAME"
cd "$PROJECT_NAME"

# ÂàõÂª∫ÁõÆÂΩïÁªìÊûÑ
echo "üìÅ ÂàõÂª∫ÁõÆÂΩïÁªìÊûÑ..."
mkdir -p src/webview
mkdir -p scripts
mkdir -p media
mkdir -p .vscode

echo "üìù ÂàõÂª∫ package.json..."
cat > package.json << 'EOF'
{
  "name": "version-info-extension",
  "displayName": "ÁâàÊú¨‰ø°ÊÅØÊü•ÁúãÂô®",
  "description": "ÊòæÁ§∫ VS Code„ÄÅNode.js Âíå Git ÁâàÊú¨‰ø°ÊÅØ",
  "version": "1.0.0",
  "engines": {
    "vscode": "^1.74.0"
  },
  "categories": ["Other"],
  "activationEvents": ["onStartupFinished"],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "versionInfo.show",
        "title": "ÊòæÁ§∫ÁâàÊú¨‰ø°ÊÅØ",
        "category": "ÁâàÊú¨‰ø°ÊÅØ"
      },
      {
        "command": "versionInfo.refresh",
        "title": "Âà∑Êñ∞ÁâàÊú¨‰ø°ÊÅØ",
        "category": "ÁâàÊú¨‰ø°ÊÅØ"
      }
    ],
    "views": {
      "explorer": [
        {
          "id": "versionInfoView",
          "name": "ÁâàÊú¨‰ø°ÊÅØ",
          "when": "true"
        }
      ]
    },
    "viewsContainers": {
      "panel": [
        {
          "id": "versionInfoPanel",
          "title": "ÁâàÊú¨‰ø°ÊÅØ",
          "icon": "$(info)"
        }
      ]
    },
    "menus": {
      "view/title": [
        {
          "command": "versionInfo.refresh",
          "when": "view == versionInfoView",
          "group": "navigation"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./"
  },
  "devDependencies": {
    "@types/vscode": "^1.74.0",
    "@types/node": "16.x",
    "typescript": "^4.9.4"
  }
}
EOF

echo "üìù ÂàõÂª∫ tsconfig.json..."
cat > tsconfig.json << 'EOF'
{
    "compilerOptions": {
        "module": "commonjs",
        "target": "ES2020",
        "outDir": "out",
        "lib": [
            "ES2020"
        ],
        "sourceMap": true,
        "rootDir": "src",
        "strict": true
    },
    "exclude": [
        "node_modules",
        ".vscode-test"
    ]
}
EOF

echo "üìù ÂàõÂª∫ .gitignore..."
cat > .gitignore << 'EOF'
out/
node_modules/
.vscode-test/
*.vsix
.DS_Store
EOF

echo "üìù ÂàõÂª∫ README.md..."
cat > README.md << 'EOF'
# ÁâàÊú¨‰ø°ÊÅØÊü•ÁúãÂô®

ËøôÊòØ‰∏Ä‰∏™VS CodeÊèí‰ª∂ÔºåÁî®‰∫éÊòæÁ§∫ÂΩìÂâçÁ≥ªÁªü‰∏≠VS Code„ÄÅNode.js„ÄÅGitÁ≠âÂ∑•ÂÖ∑ÁöÑÁâàÊú¨‰ø°ÊÅØ„ÄÇ

## ÂäüËÉΩÁâπÊÄß

- üìä ÊòæÁ§∫ VS Code ÁâàÊú¨
- üü¢ ÊòæÁ§∫ Node.js ÁâàÊú¨
- üìÅ ÊòæÁ§∫ Git ÁâàÊú¨
- üì¶ ÊòæÁ§∫ NPM ÁâàÊú¨
- üíª ÊòæÁ§∫Êìç‰ΩúÁ≥ªÁªü‰ø°ÊÅØ
- üîÑ ÊîØÊåÅÊâãÂä®Âà∑Êñ∞
- üé® ÁæéËßÇÁöÑÁïåÈù¢ËÆæËÆ°

## ÂÆâË£ÖÊñπÊ≥ï

1. ÂÖãÈöÜÊàñ‰∏ãËΩΩÊ≠§È°πÁõÆ
2. Âú®È°πÁõÆÊ†πÁõÆÂΩïËøêË°å `npm install`
3. Êåâ F5 ÂêØÂä®ÂºÄÂèëÊ®°Âºè
4. Âú®Êñ∞Á™óÂè£‰∏≠ÊµãËØïÊèí‰ª∂ÂäüËÉΩ

## ‰ΩøÁî®ÊñπÊ≥ï

1. ÂÆâË£ÖÊèí‰ª∂ÂêéÔºåÂú®VS CodeËµÑÊ∫êÁÆ°ÁêÜÂô®‰æßËæπÊ†è‰ºöÂá∫Áé∞"ÁâàÊú¨‰ø°ÊÅØ"Èù¢Êùø
2. ‰ΩøÁî® `Ctrl+Shift+P`ÔºàÊàñ `Cmd+Shift+P`ÔºâÊâìÂºÄÂëΩ‰ª§Èù¢Êùø
3. ËæìÂÖ•"ÊòæÁ§∫ÁâàÊú¨‰ø°ÊÅØ"Êàñ"Âà∑Êñ∞ÁâàÊú¨‰ø°ÊÅØ"Êù•ÊâßË°åÁõ∏Â∫îÊìç‰Ωú

## ÊîØÊåÅÁöÑÂπ≥Âè∞

- Windows
- macOS
- Linux

## ÊäÄÊúØÊ†à

- TypeScript
- VS Code Extension API
- Bash/Batch ËÑöÊú¨
EOF

echo "üìù ÂàõÂª∫ .vscode/launch.json..."
cat > .vscode/launch.json << 'EOF'
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Run Extension",
            "type": "extensionHost",
            "request": "launch",
            "args": [
                "--extensionDevelopmentPath=${workspaceFolder}"
            ]
        }
    ]
}
EOF

echo "üìù ÂàõÂª∫ .vscode/settings.json..."
cat > .vscode/settings.json << 'EOF'
{
    "typescript.preferences.importModuleSpecifier": "relative"
}
EOF

echo "üìù ÂàõÂª∫ src/extension.ts..."
cat > src/extension.ts << 'EOF'
import * as vscode from 'vscode';
import { VersionProvider } from './versionProvider';
import { VersionPanel } from './webview/versionPanel';

export function activate(context: vscode.ExtensionContext) {
    console.log('ÁâàÊú¨‰ø°ÊÅØÊèí‰ª∂Â∑≤ÊøÄÊ¥ª');

    const versionProvider = new VersionProvider(context);
    const versionPanel = new VersionPanel(context);

    // Ê≥®ÂÜåÊ†ëËßÜÂõæÊèê‰æõËÄÖ
    vscode.window.registerTreeDataProvider('versionInfoView', versionProvider);

    // Ê≥®ÂÜåÂëΩ‰ª§
    const showCommand = vscode.commands.registerCommand('versionInfo.show', () => {
        versionPanel.createOrShow();
    });

    const refreshCommand = vscode.commands.registerCommand('versionInfo.refresh', () => {
        versionProvider.refresh();
        versionPanel.refresh();
    });

    context.subscriptions.push(showCommand, refreshCommand);

    // Ëá™Âä®ÊòæÁ§∫Èù¢Êùø
    versionPanel.createOrShow();
}

export function deactivate() {}
EOF

echo "üìù ÂàõÂª∫ src/versionProvider.ts..."
cat > src/versionProvider.ts << 'EOF'
import * as vscode from 'vscode';
import * as cp from 'child_process';
import * as path from 'path';

export interface VersionInfo {
    vscode: string;
    node: string;
    git: string;
    npm: string;
    os: string;
}

export class VersionProvider implements vscode.TreeDataProvider<VersionItem> {
    private _onDidChangeTreeData: vscode.EventEmitter<VersionItem | undefined | null | void> = new vscode.EventEmitter<VersionItem | undefined | null | void>();
    readonly onDidChangeTreeData: vscode.Event<VersionItem | undefined | null | void> = this._onDidChangeTreeData.event;

    private versionInfo: VersionInfo = {
        vscode: '',
        node: '',
        git: '',
        npm: '',
        os: ''
    };

    constructor(private context: vscode.ExtensionContext) {
        this.loadVersionInfo();
    }

    refresh(): void {
        this.loadVersionInfo();
        this._onDidChangeTreeData.fire();
    }

    getTreeItem(element: VersionItem): vscode.TreeItem {
        return element;
    }

    getChildren(element?: VersionItem): Thenable<VersionItem[]> {
        if (!element) {
            return Promise.resolve([
                new VersionItem('VS Code', this.versionInfo.vscode, vscode.TreeItemCollapsibleState.None),
                new VersionItem('Node.js', this.versionInfo.node, vscode.TreeItemCollapsibleState.None),
                new VersionItem('Git', this.versionInfo.git, vscode.TreeItemCollapsibleState.None),
                new VersionItem('NPM', this.versionInfo.npm, vscode.TreeItemCollapsibleState.None),
                new VersionItem('Êìç‰ΩúÁ≥ªÁªü', this.versionInfo.os, vscode.TreeItemCollapsibleState.None)
            ]);
        }
        return Promise.resolve([]);
    }

    private async loadVersionInfo(): Promise<void> {
        try {
            // Ëé∑Âèñ VS Code ÁâàÊú¨
            this.versionInfo.vscode = vscode.version;

            // ‰ΩøÁî® bash ËÑöÊú¨Ëé∑ÂèñÂÖ∂‰ªñÁâàÊú¨‰ø°ÊÅØ
            const scriptPath = this.getScriptPath();
            const result = await this.executeScript(scriptPath);
            
            if (result) {
                this.parseScriptOutput(result);
            }
        } catch (error) {
            console.error('Ëé∑ÂèñÁâàÊú¨‰ø°ÊÅØÂ§±Ë¥•:', error);
        }
    }

    private getScriptPath(): string {
        const scriptName = 'get-versions.sh';
        return path.join(this.context.extensionPath, 'scripts', scriptName);
    }

    private executeScript(scriptPath: string): Promise<string> {
        return new Promise((resolve, reject) => {
            const command = `bash "${scriptPath}"`;
            
            cp.exec(command, { encoding: 'utf8' }, (error, stdout, stderr) => {
                if (error) {
                    console.error('ËÑöÊú¨ÊâßË°åÈîôËØØ:', error);
                    reject(error);
                    return;
                }
                resolve(stdout);
            });
        });
    }

    private parseScriptOutput(output: string): void {
        const lines = output.split('\n');
        lines.forEach(line => {
            const [key, value] = line.split(':').map(s => s.trim());
            switch (key) {
                case 'NODE':
                    this.versionInfo.node = value || 'Êú™ÂÆâË£Ö';
                    break;
                case 'GIT':
                    this.versionInfo.git = value || 'Êú™ÂÆâË£Ö';
                    break;
                case 'NPM':
                    this.versionInfo.npm = value || 'Êú™ÂÆâË£Ö';
                    break;
                case 'OS':
                    this.versionInfo.os = value || 'Êú™Áü•';
                    break;
            }
        });
    }

    getVersionInfo(): VersionInfo {
        return this.versionInfo;
    }
}

class VersionItem extends vscode.TreeItem {
    constructor(
        public readonly label: string,
        public readonly version: string,
        public readonly collapsibleState: vscode.TreeItemCollapsibleState
    ) {
        super(label, collapsibleState);
        this.tooltip = `${this.label}: ${this.version}`;
        this.description = this.version;
    }
}
EOF

echo "üìù ÂàõÂª∫ src/webview/versionPanel.ts..."
cat > src/webview/versionPanel.ts << 'EOF'
import * as vscode from 'vscode';
import * as path from 'path';
import { VersionProvider } from '../versionProvider';

export class VersionPanel {
    public static currentPanel: VersionPanel | undefined;
    private readonly _panel: vscode.WebviewPanel;
    private _disposables: vscode.Disposable[] = [];
    private versionProvider: VersionProvider;

    public static readonly viewType = 'versionInfo';

    constructor(private readonly context: vscode.ExtensionContext) {
        this.versionProvider = new VersionProvider(context);
    }

    public createOrShow(): void {
        const column = vscode.ViewColumn.Two;

        if (VersionPanel.currentPanel) {
            VersionPanel.currentPanel._panel.reveal(column);
            return;
        }

        const panel = vscode.window.createWebviewPanel(
            VersionPanel.viewType,
            'ÁâàÊú¨‰ø°ÊÅØ',
            column,
            {
                enableScripts: true,
                localResourceRoots: [
                    vscode.Uri.file(path.join(this.context.extensionPath, 'src', 'webview'))
                ]
            }
        );

        VersionPanel.currentPanel = new VersionPanel(this.context);
        VersionPanel.currentPanel._panel = panel;
        VersionPanel.currentPanel._update();

        panel.onDidDispose(() => this.dispose(), null, this._disposables);
    }

    public refresh(): void {
        if (VersionPanel.currentPanel) {
            VersionPanel.currentPanel._update();
        }
    }

    public dispose(): void {
        VersionPanel.currentPanel = undefined;

        this._panel.dispose();

        while (this._disposables.length) {
            const x = this._disposables.pop();
            if (x) {
                x.dispose();
            }
        }
    }

    private _update(): void {
        const webview = this._panel.webview;
        this._panel.title = 'ÁâàÊú¨‰ø°ÊÅØ';
        this._panel.webview.html = this._getHtmlForWebview(webview);
    }

    private _getHtmlForWebview(webview: vscode.Webview): string {
        const versionInfo = this.versionProvider.getVersionInfo();

        return `<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ÁâàÊú¨‰ø°ÊÅØ</title>
    <style>
        body {
            font-family: var(--vscode-font-family);
            font-size: var(--vscode-font-size);
            color: var(--vscode-foreground);
            background-color: var(--vscode-editor-background);
            padding: 20px;
            margin: 0;
        }
        .version-container {
            max-width: 600px;
            margin: 0 auto;
        }
        .version-header {
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid var(--vscode-panel-border);
        }
        .version-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            margin-bottom: 10px;
            background-color: var(--vscode-editor-inactiveSelectionBackground);
            border-radius: 6px;
            border-left: 4px solid var(--vscode-button-background);
        }
        .version-label {
            font-weight: bold;
            color: var(--vscode-button-background);
        }
        .version-value {
            font-family: var(--vscode-editor-font-family);
            color: var(--vscode-textLink-foreground);
        }
        .refresh-btn {
            background-color: var(--vscode-button-background);
            color: var(--vscode-button-foreground);
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            margin-top: 20px;
        }
        .refresh-btn:hover {
            background-color: var(--vscode-button-hoverBackground);
        }
        .timestamp {
            text-align: center;
            color: var(--vscode-descriptionForeground);
            font-size: 12px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="version-container">
        <div class="version-header">
            <h1>Á≥ªÁªüÁâàÊú¨‰ø°ÊÅØ</h1>
            <p>ÂΩìÂâçÂºÄÂèëÁéØÂ¢ÉÁâàÊú¨ËØ¶ÊÉÖ</p>
        </div>
        
        <div class="version-item">
            <span class="version-label">VS Code</span>
            <span class="version-value">${versionInfo.vscode || 'Ëé∑Âèñ‰∏≠...'}</span>
        </div>
        
        <div class="version-item">
            <span class="version-label">Node.js</span>
            <span class="version-value">${versionInfo.node || 'Ëé∑Âèñ‰∏≠...'}</span>
        </div>
        
        <div class="version-item">
            <span class="version-label">Git</span>
            <span class="version-value">${versionInfo.git || 'Ëé∑Âèñ‰∏≠...'}</span>
        </div>
        
        <div class="version-item">
            <span class="version-label">NPM</span>
            <span class="version-value">${versionInfo.npm || 'Ëé∑Âèñ‰∏≠...'}</span>
        </div>
        
        <div class="version-item">
            <span class="version-label">Êìç‰ΩúÁ≥ªÁªü</span>
            <span class="version-value">${versionInfo.os || 'Ëé∑Âèñ‰∏≠...'}</span>
        </div>
        
        <div class="timestamp">
            ÊúÄÂêéÊõ¥Êñ∞: ${new Date().toLocaleString('zh-CN')}
        </div>
    </div>
</body>
</html>`;
    }
}
EOF

echo "üìù ÂàõÂª∫ scripts/get-versions.sh..."
cat > scripts/get-versions.sh << 'EOF'
#!/bin/bash

# Ëé∑ÂèñÁâàÊú¨‰ø°ÊÅØÁöÑ Bash ËÑöÊú¨

echo "Ê≠£Âú®Ëé∑ÂèñÁâàÊú¨‰ø°ÊÅØ..."

# Ëé∑Âèñ Node.js ÁâàÊú¨
NODE_VERSION=""
if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version 2>/dev/null)
fi

# Ëé∑Âèñ Git ÁâàÊú¨
GIT_VERSION=""
if command -v git &> /dev/null; then
    GIT_VERSION=$(git --version 2>/dev/null | sed 's/git version //')
fi

# Ëé∑Âèñ NPM ÁâàÊú¨
NPM_VERSION=""
if command -v npm &> /dev/null; then
    NPM_VERSION=$(npm --version 2>/dev/null)
fi

# Ëé∑ÂèñÊìç‰ΩúÁ≥ªÁªü‰ø°ÊÅØ
OS_INFO=""
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    OS_INFO="Linux $(uname -r)"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    OS_INFO="macOS $(sw_vers -productVersion)"
elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then
    OS_INFO="Windows $(cmd //c ver 2>/dev/null | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')"
else
    OS_INFO="Unknown OS"
fi

# ËæìÂá∫ÁªìÊûú
echo "NODE: ${NODE_VERSION:-Êú™ÂÆâË£Ö}"
echo "GIT: ${GIT_VERSION:-Êú™ÂÆâË£Ö}"
echo "NPM: ${NPM_VERSION:-Êú™ÂÆâË£Ö}"
echo "OS: ${OS_INFO:-Êú™Áü•}"
EOF

# ËÆæÁΩÆËÑöÊú¨ÊâßË°åÊùÉÈôê
chmod +x scripts/get-versions.sh

echo "üéØ ÂàõÂª∫È°πÁõÆÂÆâË£ÖÂíåËøêË°åËÑöÊú¨..."
cat > install-and-run.sh << 'EOF'
#!/bin/bash

echo "üîß ÂÆâË£ÖÈ°πÁõÆ‰æùËµñ..."
npm install

echo "üî® ÁºñËØë TypeScript..."
npm run compile

echo "‚úÖ È°πÁõÆÂàõÂª∫ÂÆåÊàêÔºÅ"
echo ""
echo "üìã Êé•‰∏ãÊù•ÁöÑÊ≠•È™§Ôºö"
echo "1. Âú® VS Code ‰∏≠ÊâìÂºÄÈ°πÁõÆÊñá‰ª∂Â§π"
echo "2. Êåâ F5 ÂêØÂä®Êâ©Â±ïË∞ÉËØïÊ®°Âºè"
echo "3. Âú®Êñ∞Á™óÂè£‰∏≠ÊµãËØïÊèí‰ª∂ÂäüËÉΩ"
echo ""
echo "üöÄ ÊàñËÄÖÁõ¥Êé•ËøêË°å: code . && code --extensionDevelopmentPath=."
EOF

chmod +x install-and-run.sh

echo ""
echo "üéâ È°πÁõÆÂàõÂª∫ÂÆåÊàêÔºÅ"
echo "üìÅ È°πÁõÆÁõÆÂΩï: $(pwd)"
echo ""
echo "üìã È°πÁõÆÁªìÊûÑÔºö"
find . -type f -name "*.json" -o -name "*.ts" -o -name "*.sh" -o -name "*.md" | sort
echo ""
echo "üîß ‰∏ã‰∏ÄÊ≠•Êìç‰ΩúÔºö"
echo "1. cd $PROJECT_NAME"
echo "2. bash install-and-run.sh"
echo "3. Âú® VS Code ‰∏≠Êåâ F5 ÂêØÂä®Ë∞ÉËØï"
echo ""
echo "‚ú® ‰∫´ÂèóÊÇ®ÁöÑ VS Code Êèí‰ª∂ÂºÄÂèë‰πãÊóÖÔºÅ"